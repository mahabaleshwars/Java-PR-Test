name: Java Custom Installation Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-java-package:
    name: ${{ matrix.distribution }} ${{ matrix.java-version }} (${{ matrix.package }}) on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        distribution: [temurin, zulu, liberica]
        java-version: [11, 17]
        package: [jdk, jre]
        exclude:
          # Exclude problematic combinations
          - package: jre
            distribution: corretto

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # For JRE test cases, install a specific JDK first for compilation
      - name: Setup Compilation JDK
        if: matrix.package == 'jre'
        id: setup-compile-jdk
        uses: skateball/setup-java@sapmachineUrlsUpdated
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java-version }}
          java-package: jdk
          
      # Create the Java file first with the compilation JDK
      - name: Create Java test file (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p java
          cat > java/HelloWorldApp.java << EOF
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version") + " (" + System.getProperty("java.vm.name") + ")");
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          EOF

      - name: Create Java test file (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path java
          @'
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version") + " (" + System.getProperty("java.vm.name") + ")");
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          '@ | Out-File -FilePath java/HelloWorldApp.java -Encoding utf8

      # For JRE case - compile with the specific JDK first
      - name: Pre-compile for JRE (Unix)
        if: matrix.package == 'jre' && runner.os != 'Windows'
        run: |
          cd java
          "${{ steps.setup-compile-jdk.outputs.path }}/bin/javac" HelloWorldApp.java

      - name: Pre-compile for JRE (Windows)
        if: matrix.package == 'jre' && runner.os == 'Windows'
        shell: pwsh
        run: |
          cd java
          & "${{ steps.setup-compile-jdk.outputs.path }}\bin\javac" HelloWorldApp.java

      # Now set up the target Java package (JDK or JRE)
      - name: Setup Java with custom package type
        id: setup-java
        uses: skateball/setup-java@sapmachineUrlsUpdated
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java-version }}
          java-package: ${{ matrix.package }}

      # For JDK case - compile and run
      - name: Compile and run with JDK
        if: matrix.package == 'jdk'
        run: |
          cd java
          javac HelloWorldApp.java
          java HelloWorldApp

      # For JRE case - just run (already compiled)
      - name: Run with JRE
        if: matrix.package == 'jre'
        run: |
          cd java
          java HelloWorldApp

      - name: Report Java details
        run: |
          echo "Java Version: $(java -version 2>&1 | head -n 1)"
          echo "Java Home: $JAVA_HOME"
          echo "Java Package Type: ${{ matrix.package }}"
          echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44"
          echo "Current User's Login: mahabaleshwars"
        shell: bash

  test-java-architecture:
    name: ${{ matrix.distribution }} JDK ${{ matrix.java-version }} (${{ matrix.architecture }}) on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x86 & x64 - most reliable
          - os: windows-latest
            distribution: zulu
            java-version: 11
            architecture: x64
          - os: windows-latest
            distribution: zulu
            java-version: 11
            architecture: x86
          - os: windows-latest
            distribution: temurin
            java-version: 11
            architecture: x64
          # Ubuntu x64 only
          - os: ubuntu-latest
            distribution: temurin
            java-version: 11
            architecture: x64
          - os: ubuntu-latest
            distribution: zulu
            java-version: 11
            architecture: x64
          # MacOS x64 only
          - os: macos-latest
            distribution: temurin
            java-version: 11
            architecture: x64
          - os: macos-latest
            distribution: zulu
            java-version: 11
            architecture: x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install dependencies for x86 on Linux
      - name: Install x86 dependencies
        if: runner.os == 'Linux' && matrix.architecture == 'x86'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y zlib1g:i386 libstdc++6:i386

      - name: Setup Java with custom architecture
        id: setup-java
        uses: skateball/setup-java@sapmachineUrlsUpdated
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java-version }}
          architecture: ${{ matrix.architecture }}

      - name: Create Java test file (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p java
          cat > java/HelloWorldApp.java << EOF
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version") + " (" + System.getProperty("sun.arch.data.model") + "-bit)");
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          EOF

      - name: Create Java test file (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path java
          @'
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version") + " (" + System.getProperty("sun.arch.data.model") + "-bit)");
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          '@ | Out-File -FilePath java/HelloWorldApp.java -Encoding utf8

      - name: Compile and run Java program
        run: |
          cd java
          javac HelloWorldApp.java
          java HelloWorldApp

      - name: Report Java details
        run: |
          echo "Java Version: $(java -version 2>&1 | head -n 1)"
          echo "Java Home: $JAVA_HOME"
          echo "Architecture: ${{ matrix.architecture }}"
          echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44"
          echo "Current User's Login: mahabaleshwars"
        shell: bash

  test-jdkfile-installation:
    name: JDKFile installation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            download_url: "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.20.1%2B1/OpenJDK11U-jdk_x64_linux_hotspot_11.0.20.1_1.tar.gz"
          - os: windows-latest
            download_url: "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.20.1%2B1/OpenJDK11U-jdk_x64_windows_hotspot_11.0.20.1_1.zip"
          - os: macos-latest
            download_url: "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.20.1%2B1/OpenJDK11U-jdk_x64_mac_hotspot_11.0.20.1_1.tar.gz"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JDK file (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -L "${{ matrix.download_url }}" -o "${{ runner.temp }}/java_package.tar.gz"

      - name: Download JDK file (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "${{ matrix.download_url }}" -OutFile "${{ runner.temp }}/java_package.zip"

      - name: Setup Java from file (Linux/macOS)
        if: runner.os != 'Windows'
        id: setup-java-unix
        uses: skateball/setup-java@sapmachineUrlsUpdated
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/java_package.tar.gz
          java-version: '11.0.20'
          architecture: x64

      - name: Setup Java from file (Windows)
        if: runner.os == 'Windows'
        id: setup-java-win
        uses: skateball/setup-java@sapmachineUrlsUpdated
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/java_package.zip
          java-version: '11.0.20'
          architecture: x64

      - name: Create Java test file (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p java
          cat > java/HelloWorldApp.java << EOF
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version"));
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          EOF

      - name: Create Java test file (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path java
          @'
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version"));
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          '@ | Out-File -FilePath java/HelloWorldApp.java -Encoding utf8

      - name: Compile and run Java program
        run: |
          cd java
          javac HelloWorldApp.java
          java HelloWorldApp

      - name: Report Java details
        run: |
          echo "Java Version: $(java -version 2>&1 | head -n 1)"
          echo "Java Home: $JAVA_HOME"
          echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44"
          echo "Current User's Login: mahabaleshwars"
        shell: bash

  test-jdk-fetch-latest:
    name: Fetch latest JDK on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java-version: [17]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest temurin JDK with explicit URL
        run: |
          # Use a known fixed URL instead of trying to parse the GitHub API
          download_url="https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.9%2B9/OpenJDK17U-jdk_x64_linux_hotspot_17.0.9_9.tar.gz"
          echo "Downloading from: $download_url"
          curl -Ls "$download_url" -o "${{ runner.temp }}/java_package.tar.gz"
          echo "java_version=17.0.9" >> "$GITHUB_OUTPUT"
        id: fetch_latest_jdk

      - name: Setup Java from latest file
        uses: skateball/setup-java@sapmachineUrlsUpdated
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/java_package.tar.gz
          java-version: ${{ steps.fetch_latest_jdk.outputs.java_version || '17.0.9' }}
          architecture: x64

      - name: Create Java test file
        run: |
          mkdir -p java
          cat > java/HelloWorldApp.java << EOF
          public class HelloWorldApp {
              public static void main(String[] args) {
                  System.out.println("Hello from " + System.getProperty("java.vendor") + " " + System.getProperty("java.version"));
                  System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44");
                  System.out.println("Current User's Login: mahabaleshwars");
              }
          }
          EOF

      - name: Compile and run Java program
        run: |
          cd java
          javac HelloWorldApp.java
          java HelloWorldApp

      - name: Report Java details
        run: |
          echo "Java Version: $(java -version 2>&1 | head -n 1)"
          echo "Java Home: $JAVA_HOME"
          echo "Detected Latest Version: ${{ steps.fetch_latest_jdk.outputs.java_version || '17.0.9' }}"
          echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-07-18 10:35:44"
          echo "Current User's Login: mahabaleshwars"
        shell: bash
